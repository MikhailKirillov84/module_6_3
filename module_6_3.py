# Необходимо написать 3 класса:
# Horse - класс описывающий лошадь. Объект этого класса обладает следующими атрибутами:
# x_distance = 0 - пройденный путь.
# sound = 'Frrr' - звук, который издаёт лошадь.
# И методами:
# run(self, dx), где dx - изменение дистанции, увеличивает x_distance на dx.
#
# Eagle - класс описывающий орла. Объект этого класса обладает следующими атрибутами:
# y_distance = 0 - высота полёта
# sound = 'I train, eat, sleep, and repeat' - звук, который издаёт орёл (отсылка)
# И методами:
# fly(self, dy) где dy - изменение дистанции, увеличивает y_distance на dy.
#
# Pegasus - класс описывающий пегаса. Наследуется от Horse и Eagle в том же порядке.
# Объект такого класса должен обладать атрибутами классов родителей в порядке наследования.
# Также обладает методами:
# move(self, dx, dy) - где dx и dy изменения дистанции. В этом методе должны запускаться наследованные методы run и fly соответственно.
# get_pos(self) возвращает текущее положение пегаса в виде кортежа - (x_distance, y_distance) в том же порядке.
# voice - который печатает значение унаследованного атрибута sound.

# создадим класс "Horse"
class Horse:
    # создание объекта через метод (__init__ - конструктор), который принимает несколько(*args) значений
    def __init__(self, *args):
        # атрибут "x_distance" принимает значение - пройденный путь
        self.x_distance = 0
        # атрибут "sound" принимает значение - звук, который издаёт лошадь
        self.sound = 'Frrr'
        # вызовем функцию(super()), которая позволяет вызывать методы родительского класса и передает туда (*args)
        super().__init__(*args)

    # создадим метод "run", которы будет иметь один атрибут
    def run(self, dx):
        # атрибут "dx" изменяет дистанцию, увеличивает "x_distance" на атрибут "dx"
        self.x_distance += dx

# создадим класс "Eagle"
class Eagle:
    # создание объекта через метод (__init__ - конструктор), который принимает несколько(*args) значений
    def __init__(self, *args):
        # атрибут "y_distance" принимает значение - высота полёта
        self.y_distance = 0
        # атрибут "y_distance" принимает значение - звук, который издаёт орёл
        self.sound = 'I train, eat, sleep, and repeat'
        # вызовем функцию(super()), которая позволяет вызывать методы родительского класса и передает туда (*args)
        super().__init__(*args)

    # создадим метод "fly", который будет иметь один атрибут
    def fly(self, dy):
        # атрибут "dy" изменяет дистанцию, увеличивает "y_distance" на атрибут "dy"
        self.y_distance += dy

# создадим класс "Pegasus" который наследует методы и атрибуты родительского класса "Horse" и "Eagle", который принимает несколько(*args) значений
class Pegasus(Horse, Eagle):
    # создание объекта через метод (__init__ - конструктор), который принимает несколько(*args) значений
    def __init__(self, *args):
        # вызовем функцию(super()), которая позволяет вызывать методы родительского класса и передает туда (*args)
        super().__init__(*args)

    # создадим метод "move", который будет принимать два атрибута
    def move(self, dx, dy):
        # атрибут(dx) принимает значение метода "run" класса "Horse"
        self.run(dx)
        # атрибут(dy) принимает значение метода "fly" класса "Eagle"
        self.fly(dy)

    # создадим метод "get_pos"
    def get_pos(self):
        # возвращает текущее положение пегаса в виде кортежа - (x_distance, y_distance) в том же порядке
        return self.x_distance, self.y_distance

    # создадим метод "voice"
    def voice(self):
        # выводит значение унаследованного атрибута "sound"
        print(self.sound)

# создадим объект(p1)
p1 = Pegasus()

# выведем на печать метод "get_pos" для объекта "р1"
print(p1.get_pos())
# поменяем значение атрибутов(dx, dy) для объекта "р1" в методе "move"
p1.move(10, 15)
# выведем на печать метод "get_pos" для объекта "р1"
print(p1.get_pos())
# поменяем значение атрибутов(dx, dy) для объекта "р1" в методе "move"
p1.move(-5, 20)
# выведем на печать метод "get_pos" для объекта "р1"
print(p1.get_pos())
# выведем на печать метод "voice" для объекта "р1"
p1.voice()




